---
layout: post
title: Записки Кент Бека — Test First
excerpt: "Когда мы должны писать тесты? До того как вы напишите код, который будет тестироваться."
categories: [tdd, test-driven development, testing]
comments: true
---

Кент Бек приводит нам интересную диаграмму, в которой описана простая закономерность:
>Если мы чувствуем, что недостаточно протестировали модуль, тогда мы начинаем испытывать стресс (напряжение) за реализованную функциональность.

![](https://cdn-images-1.medium.com/max/800/1*evlDCHWOt7bi1Mm8qHNPqg.png)

В связи с этим, что если мы примем для себя правило, которое гласило бы, что мы всегда должны сначала писать тест? Тогда бы мы смогли перевернуть диаграмму в положительную сторону:
> Test-First сверху негативно соединен со стрессом снизу, а стресс негативно соединен с Test-First.

### Что все это значит на самом деле?

Test-First программирование способствует написанию тестов для продакшн кода до того, как вы напишете этот продакшн код. Вместо подхода “я напишу этот тест позже” (на самом деле нет), то мы сначала пишем тест.

Для каждого кусочка функциональности продакшн кода мы создаем маленький (в идеале очень маленький) сфокусированный тест который определяет и проверяет что должен делать код. Такой тест может быть и не компилируемым по-началу, потому что на этот момент мы можем не иметь всех нужных нам классов и методов. Однако он функционирует как своего рода исполняемая спецификация. Затем мы должны сделать минимально усилий, чтобы этот тест стал компилируемым, запустить его и сразу же убедиться в том, как тест стал красным. И после всего этого мы пишем минимальное количество кода, который сделает тест успешным.

### Преимущества Test-First подхода:

- Кому данный подход покажется странным, но тщательный набор таких юнит-тестов служат своего рода рыболовной сетью для дефектов. Они точно определяют текущее поведение системы. Хорошие Test-first команды обнаруживают, что на протяжении всего жизненного цикла системы они выявляют значительно меньшее количество дефектов и тратят гораздо меньше времени на отладку.
- Так же, хорошо написанные юнит-тесты по определению служат отличной дизайн документацией, которая всегда синхронизирована с текущей кодовой базой.
- И наконец, еще одним преимуществом хорошо структурированных юнит тестов — это рефакторинг. Если во время рефакторинга мы нечаянно что-то сломали, то тесты сразу известят нас об этом, но при этом нельзя забывать об одном правиле: пишите тесты, которые быстро выполняются и запускайте их как можно чаще и чаще.
